**To-Do File for Protein Tracker App**

---

**ATM**

(Functionality next)

- Fix pagination UI
- Dark mode toggle
- User management
  - Need users to 'watch' certain items and get email notifications when price drops or raises
  - Find smart way to implement watching and fetching the prices cron daily
    - If we have barcodes for all 'watched' items (will just be a set) we can just do all those API calls
- Coles too

- Rate limiting stuff
  - RapidAPI header check
  - Backend middleware
- Watchlist use the fetchWatchlist from context provider when loading
- Finalize cron stuff and watchlist configs

**Key issues**

- API usage and fetching images
  - Employ some optimistic fetching techniques, update once daily, cache results
- Images take like 10s to load
  - Spinner with some default timeout on frontend, maybe an 'attempted fetch' flag if our fetch fails always

**Key Features**

- Search for products by name, category, or brand.
- Compare products based on price and nutritional information.
- Allow users to track favorite products and receive alerts when prices drop.
- Send daily email notifications for deals or discounts.
- Display price history for tracked products.
- Calculate and display cost per serving or protein per dollar.

---

**Architecture Overview**

- **Frontend:**

  - React.js or Vue.js for dynamic user interfaces.
  - ShadCN for reusable UI components
  - Tailwind CSS for responsive and modern styling.
  - Key components:
    - Search bar for products.
    - Comparison table for products.
    - Dashboard to show tracked products and alerts.

- **Backend:**

  - Node.js with Express.js for API logic and server-side functions.
  - Handles RapidAPI integration for fetching product data.
  - Manages user preferences, price tracking, and email notifications.

- **Database:**

  - PostgreSQL or MySQL for structured data storage.
  - Tables:
    - `users`: Store user details (ID, email, preferences).
    - `products`: Store product details (ID, name, barcode, category, size, price).
    - `price_history`: Store price changes over time.
    - `favorites`: Track products users follow.

- **Notifications System:**

  - Email notifications for daily deals.
  - Services: SendGrid, Postmark, or AWS SES.

- **Scheduler:**
  - Cron jobs for daily product price updates.
  - Tools: `node-cron` or Bull with Redis for task management.

---

**Tech Stack**

- **Frontend:** React.js, Tailwind CSS.
- **Backend:** Node.js with Express.js.
- **Database:** PostgreSQL or MySQL.
- **Email Notifications:** SendGrid, Postmark, or AWS SES.
- **Scheduler:** Cron jobs (node-cron, Bull).
- **Hosting:** Vercel (frontend), AWS or Heroku (backend).

---

**Frontend**

- Implement a search bar with fuzzy search functionality.
- Create a product comparison table to display relevant metrics.
- Build a user dashboard for tracking favorite products and alerts.
- Enhance UX/UI with Tailwind CSS for modern and responsive design.

---

**Backend**

- Create API routes for products, users, and tracking functionalities.
- Integrate RapidAPI to fetch product data.
- Set up cron jobs for daily price updates.
- Manage user preferences and notifications.

---

**Database**

- Design schema:
  - `users` table (ID, email, preferences).
  - `products` table (ID, name, barcode, brand, category, size, price).
  - `price_history` table (product ID, date, price).
  - `favorites` table (user ID, product ID).
- Store price history for generating graphs and trends.

---

**Notifications**

- Set up email notifications:
  - Send daily alerts for tracked product price drops.
  - Allow users to manage notification preferences.

---

**Scheduler**

- Set up cron jobs:
  - Query RapidAPI daily for product price updates.
  - Trigger email notifications if significant price drops are detected.

---

**Polish and Deployment (Week 3)**

- Improve UI/UX for comparison tools.
- Add graphs to visualize price trends.
- Deploy frontend to Vercel.
- Deploy backend to AWS or Heroku.

---

**Additional Features for Future Development**

- Push notifications for real-time alerts.
- Machine learning for personalized recommendations.
- Community reviews and upvotes for products.
- Integration with fitness apps to calculate daily protein intake.
